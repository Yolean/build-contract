#!/usr/bin/env bash
[ -z "$DEBUG" ] || set -x
set -eo pipefail
trap "exit" INT

ROOT=$PWD
DIR=`dirname $(realpath $0)`

# Default values
DO_PUSH=false
BUILD_CONTRACT_DRYRUN=false
BUILD_CONTRACT_GREP=""
BUILD_CONTRACT_EXTRA=""

# Help function
function show_help {
  echo "Usage: $0 [options]"
  echo "Options:"
  echo "  push                   Push images after build"
  echo "  --dry-run              Print commands instead of executing them"
  echo "  --grep PATTERN         Only run contracts matching PATTERN"
  echo "  -f, --file FILE        Additional compose file to include"
  echo "  -h, --help             Show this help message"
  exit 0
}

# Parse arguments
while [[ $# -gt 0 ]]; do
  case "$1" in
    push)
      DO_PUSH=true
      ;;
    --dry-run)
      BUILD_CONTRACT_DRYRUN=true
      ;;
    --grep)
      shift
      if [[ -z "$1" ]]; then
        echo "  --- build-contract: No grep pattern provided ---  "
        exit 1
      fi
      BUILD_CONTRACT_GREP="$1"
      ;;
    -f|--file)
      shift
      if [[ -z "$1" ]]; then
        echo "  --- build-contract: No override file provided ---  "
        exit 1
      fi
      BUILD_CONTRACT_EXTRA=" -f $1"
      ;;
    -h|--help)
      show_help
      ;;
    *)
      echo "Unknown option: $1"
      show_help
      ;;
  esac
  shift
done

if [[ "$DO_PUSH" == "false" ]]; then
  echo "  --- build-contract: Offline run (builds will not docker pull and image: will not be pushed) ---  "
fi

[[ -z "$PROJECT_NAME" ]] && PROJECT_NAME=${ROOT##*/}

export BUILD_TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

GIT_COMMIT=$(git rev-parse --verify --short HEAD 2>/dev/null || echo '')
if [[ ! -z "$GIT_COMMIT" ]]; then
  GIT_STATUS=$(git status --untracked-files=no --porcelain=v2)
  if [[ ! -z "$GIT_STATUS" ]]; then
    GIT_COMMIT="$GIT_COMMIT-dirty"
  fi
  echo "  --- build-contract: This is a git repo and GIT_COMMIT=$GIT_COMMIT ---  "
  export GIT_COMMIT
fi

# echo "In $(pwd) at $(date -Iseconds) on $(hostname)"

function wait_for_contract {
  sleep 3
  compose_name=$(echo "$1" | sed 's/[^A-Za-z0-9_-]//g')
  # Count the number of failed containers
  # NOTE: Assumes no other build contract process is running at the same time
  filters="-f label=com.yolean.build-contract -f name=$compose_name"
  test_containers=$(docker ps -aq $filters)
  n_running_test_containers=$(docker ps -q $filters | wc -l)
  n_failures=$(docker inspect -f "{{.State.ExitCode}}" $test_containers | grep -v 0 | wc -l)

  if [[ $n_failures -gt 0 ]]; then
    # Build Contract Failed
    echo 1
  elif [[ $n_running_test_containers -eq 0 ]]; then
    # Build Contract Succeeded
    echo 0
  else
    # We're not done yet
    wait_for_contract "$1"
  fi
}

# https://github.com/tektoncd/pipeline/blob/v0.10.0/docs/resources.md#surfacing-the-image-digest-built-in-a-task
function handle_push_result {
  [ -d /workspace/output ] || exit 0
  target="$1"
  resultline="$2"
  output="/workspace/output/$target"
  mkdir -p -v $output
  tag=$(echo "$resultline" | cut -d':' -f1)
  digest=$(echo "$resultline" | cut -d' ' -f3)
  size=$(echo "$resultline" | cut -d' ' -f5)
  [ -z "$tag" ] && echo "Failed to find tag name in docker push result line: $resultline" && exit 1
  [ -z "$digest" ] && echo "Failed to find digest in docker push result line: $resultline" && exit 1
  [ -z "$size" ] && echo "Failed to find size in docker push result line: $resultline" && exit 1
  cat <<EOF > $output/index.json
{
  "schemaVersion": 2,
  "manifests": [
    {
      "mediaType": "application/vnd.oci.image.index.v1+json",
      "size": $size,
      "digest": "$digest",
      "annotations": {
        "org.opencontainers.image.ref.name": "$tag",
        "com.yolean.build-target.name": "$target"
      }
    }
  ]
}
EOF
  echo "Wrote $output/index.json:"
  cat $output/index.json
}

MONOREPO_PRE=$(cat package.json | grep '"build-contract-predockerbuild"' | awk -F '"' '{ print $4 }')
MONOREPO_PRE_RUN="echo 'No predockerbuild command found'"
if [[ "$MONOREPO_PRE" == "#" ]]; then MONOREPO_PRE_RUN="$DIR/nodejs/build-contract-predockerbuild"
elif [[ ! -z "$MONOREPO_PRE" ]]; then MONOREPO_PRE_RUN="npm run build-contract-predockerbuild"; fi
if [[ "$BUILD_CONTRACT_DRYRUN" == true ]]; then
  echo "  --- build-contract: DRY RUN printing commands"
  echo "$MONOREPO_PRE_RUN"
else
  echo "  --- build-contract: $MONOREPO_PRE_RUN ---  "
  $MONOREPO_PRE_RUN
fi

CONTRACTS_DIR="build-contracts/"
for compose_file in $(ls $CONTRACTS_DIR | grep .yml); do
  if [[ -n "$BUILD_CONTRACT_GREP" && ! "$compose_file" == *"$BUILD_CONTRACT_GREP"* ]]; then
    continue
  fi
  compose_name=${compose_file%%\.yml}
  compose_name=${compose_name%%\.docker-compose}
  [[ ! -z "$PROJECT_NAME" ]] && compose_name="${PROJECT_NAME}_$compose_name"
  echo "  --- build-contract: $compose_name ($CONTRACTS_DIR$compose_file) ---  "
  docker_compose="docker-compose --ansi=never --progress=plain -f $CONTRACTS_DIR$compose_file$BUILD_CONTRACT_EXTRA -p $compose_name"
  echo "  --- build-contract: $docker_compose ---  "
  if [[ "$BUILD_CONTRACT_DRYRUN" == true ]]; then
    docker_compose="echo $docker_compose"
  fi

  # Stops and removes containers, networks
  # and volumes (including named volumes declared in the docker-compose.yml file)
  $docker_compose down -v

  $docker_compose up --build --force-recreate -d
  $docker_compose logs -f &
  if [[ "$BUILD_CONTRACT_DRYRUN" == true ]]; then
    continue
  fi
  bar=$(wait_for_contract $compose_name)
  echo "  --- build-contract: Build Contract finished with $bar"
  $docker_compose kill
  if [[ $bar -ne 0 ]]; then
    echo "  --- build-contract: ERROR: Build Contract $compose_file failed, please see logs above for details"
    echo "  --- build-contract: ERROR: Aborting build!"
    $docker_compose ps
    exit $bar
  fi
done

echo "  --- build-contract: Build Contract finished. ---  "

# Push targets
for compose_file in $(ls "$CONTRACTS_DIR" | grep .yml); do
  if [[ -n "$BUILD_CONTRACT_GREP" && ! "$compose_file" == *"$BUILD_CONTRACT_GREP"* ]]; then
    echo "  --- build-contract: grep \"$BUILD_CONTRACT_GREP\" skips $compose_file"
    continue
  fi
  echo "  --- build-contract: $compose_file ---  "
  compose_file="$CONTRACTS_DIR$compose_file"
  docker_compose="docker-compose --ansi=never --progress=plain -f $compose_file$BUILD_CONTRACT_EXTRA"
  if [[ "$BUILD_CONTRACT_DRYRUN" == true ]]; then
    docker_compose="echo $docker_compose"
  fi
  targets="$(cat $compose_file | $DIR/parsetargets)"
  for target in $targets; do
    echo "  --- build-contract: Found target \"$target\" ---  "
    if [[ $DO_PUSH == true ]]; then
      echo "  --- build-contract: Pushing target $target ---  "
      $docker_compose push $target 2>&1 | tee -a .buildcontract-push.out
      last=$(tail -n 1 .buildcontract-push.out && rm .buildcontract-push.out)
      if [[ "$last" =~ Pushing[[:space:]]+([^:]+:[^:]+):[[:space:]] ]]; then
        image_push="${BASH_REMATCH[1]}"
        echo "# Got docker-compose push output for $image_push, docker push to get digest and size"
        docker push $image_push | tee -a .buildcontract-push.out
        last=$(tail -n 1 .buildcontract-push.out && rm .buildcontract-push.out)
      fi
      handle_push_result $target "$last"
    fi
  done
done
