#!/bin/bash
set -e
if [[ ! -z "$DEBUG" ]]; then
  set -x
fi
trap "exit" INT

ROOT=$PWD
DIR=`dirname $(realpath $0)`
if [[ "$1" == "push" ]]; then
  DO_PUSH=true
else
  DO_PUSH=false
  echo "  --- build-contract: Offline run (builds will not docker pull and image: will not be pushed) ---  "
fi

[[ -z "$PROJECT_NAME" ]] && PROJECT_NAME=${ROOT##*/}

export BUILD_TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

GIT_COMMIT=$(git rev-parse --verify --short HEAD 2>/dev/null || echo '')
if [[ ! -z "$GIT_COMMIT" ]]; then
  GIT_STATUS=$(git status -s)
  if [[ ! -z "$GIT_STATUS" ]]; then
    GIT_COMMIT="$GIT_COMMIT-dev"
  fi
  echo "  --- build-contract: This is a git repo and GIT_COMMIT=$GIT_COMMIT ---  "
  export GIT_COMMIT
fi

# echo "In $(pwd) at $(date -Iseconds) on $(hostname)"

function wait_for_contract {
  sleep 3
  compose_name=$(echo "$1" | sed 's/[^A-Za-z0-9_-]//g')
  # Count the number of failed containers
  # NOTE: Assumes no other build contract process is running at the same time
  filters="-f label=com.yolean.build-contract -f name=$compose_name"
  test_containers=$(docker ps -aq $filters)
  n_running_test_containers=$(docker ps -q $filters | wc -l)
  n_failures=$(docker inspect -f "{{.State.ExitCode}}" $test_containers | grep -v 0 | wc -l)

  if [[ $n_failures -gt 0 ]]; then
    # Build Contract Failed
    echo 1
  elif [[ $n_running_test_containers -eq 0 ]]; then
    # Build Contract Succeeded
    echo 0
  else
    # We're not done yet
    wait_for_contract "$1"
  fi
}

# Perform tests
BUILD_FLAGS='';
if [[ $DO_PUSH == true ]]; then
  BUILD_FLAGS="$BUILD_FLAGS --pull";
fi

MONOREPO_PRE=$(cat package.json | grep '"build-contract-predockerbuild"' | awk -F '"' '{ print $4 }')
if [[ "$MONOREPO_PRE" == "#" ]]; then $DIR/nodejs/build-contract-predockerbuild
elif [[ ! -z "$MONOREPO_PRE" ]]; then npm run build-contract-predockerbuild; fi

CONTRACTS_DIR="build-contracts/"
for compose_file in $(ls $CONTRACTS_DIR | grep .yml); do
  compose_name=${compose_file%%\.yml}
  compose_name=${compose_name%%\.docker-compose}
  [[ ! -z "$PROJECT_NAME" ]] && compose_name="${PROJECT_NAME}_$compose_name"
  echo "  --- build-contract: $compose_name ($CONTRACTS_DIR$compose_file) ---  "
  docker_compose="docker-compose -f $CONTRACTS_DIR$compose_file -p $compose_name"

  # Stops and removes containers, networks
  # and volumes (including named volumes declared in the docker-compose.yml file)
  $docker_compose down -v

  $docker_compose build $BUILD_FLAGS
  $docker_compose up --force-recreate -d
  $docker_compose logs -f &
  bar=$(wait_for_contract $compose_name)
  echo "  --- build-contract: Build Contract finished with $bar"
  $docker_compose kill
  if [[ $bar -ne 0 ]]; then
    echo "  --- build-contract: ERROR: Build Contract $compose_file failed, please see logs above for details"
    echo "  --- build-contract: ERROR: Aborting build!"
    $docker_compose ps
    exit $bar
  fi
done

echo "  --- build-contract: Build Contract finished. ---  "

# Push targets
for compose_file in $(ls "$CONTRACTS_DIR" | grep .yml); do
  echo "  --- build-contract: $compose_file ---  "
  compose_file="$CONTRACTS_DIR$compose_file"
  docker_compose="docker-compose -f $compose_file"
  targets="$(cat $compose_file | $DIR/parsetargets)"
  for target in $targets; do
    echo "  --- build-contract: Found target \"$target\" ---  "
    if [[ $DO_PUSH == true ]]; then
      echo "  --- build-contract: Pushing target $target ---  "
      $docker_compose push $target
    fi
  done
done
