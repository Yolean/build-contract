#!/bin/bash
set -e
if [[ ! -z "$DEBUG" ]]; then
  set -x
fi
trap "exit" INT

ROOT=$PWD
DIR=$(dirname $(realpath $(which $0)))


if [[ -z "$PUSH_TAG" ]]; then
  echo "Missing env. variable PUSH_TAG. Please set it and run again!"
  exit 1
fi

# echo "In $(pwd) at $(date -Iseconds) on $(hostname)"

function wait_for_contract {
  # Count the number of failed containers
  # NOTE: Assumes no other build contract process is running at the same time
  test_containers=$(docker ps -aq --filter label=com.yolean.build-contract)
  n_running_test_containers=$(docker ps -q --filter label=com.yolean.build-contract | wc -l)
  n_failures=$(docker inspect -f "{{.State.ExitCode}}" $test_containers | grep -v 0 | wc -l)

  if [[ $n_failures -gt 0 ]]; then
    # Build Contract Failed
    echo 1
  elif [[ $n_running_test_containers -eq 0 ]]; then
    # Build Contract Succeeded
    echo 0
  else
    # We're not done yet
    sleep 3
    wait_for_contract
  fi
}

# Perform tests
cd $ROOT/build-contracts/
for compose_file in $(ls | grep .yml); do
  docker_compose="docker-compose -f $compose_file"
  $docker_compose rm -f
  # Set PUSH_TAG to latest to make sure that services with both
  # `image` and `build` properties are built, and not pulled from registry.
  # The latter causes numerous of huvudbrys
  PUSH_TAG=latest $docker_compose up --build --force-recreate -d
  $docker_compose logs -f &
  bar=$(wait_for_contract)
  echo "Build Contract finished with $bar"
  $docker_compose kill
  if [[ $bar -ne 0 ]]; then
    echo "ERROR: Build Contract $compose_file failed, please see logs above for details"
    echo "ERROR: Aborting build!"
    exit $bar
  fi
done

echo "Build Contract finished. Building images and pushing to registry!"

# Push targets
for compose_file in $(ls | grep .yml); do
  docker_compose="docker-compose -f $compose_file"
  targets="$(cat $compose_file | $DIR/parsetargets)"
  for target in $targets; do
    $docker_compose push $target
  done
done
